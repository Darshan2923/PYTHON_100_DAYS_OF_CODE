All objects
Let's try to display all of our posts first. You can do that with the following command:

command-line
>>> Post.objects.all()
Traceback (most recent call last):
      File "<console>", line 1, in <module>
NameError: name 'Post' is not defined

Oops! An error showed up. It tells us that there is no Post. It's correct â€“ we forgot to import it first!

command-line
>>> from blog.models import Post

We import the model Post from blog.models. Let's try displaying all posts again:

command-line
>>> Post.objects.all()
<QuerySet [<Post: my post title>, <Post: another post title>]>

This is a list of the posts we created earlier! We created these posts using the Django admin interface. But now we want to create new posts using Python, so how do we do that?

Create object
This is how you create a new Post object in database:

command-line
>>> Post.objects.create(author=me, title='Sample title', text='Test')

But we have one missing ingredient here: me. We need to pass an instance of User model as an author. How do we do that?

Let's import User model first:

command-line
>>> from django.contrib.auth.models import User

What users do we have in our database? Try this:

command-line
>>> User.objects.all()
<QuerySet [<User: ola>]>

This is the superuser we created earlier! Let's get an instance of the user now (adjust this line to use your own username):

command-line
>>> me = User.objects.get(username='ola')

As you can see, we now get a User with a username that equals 'ola'. Neat!

Now we can finally create our post:

command-line
>>> Post.objects.create(author=me, title='Sample title', text='Test')
<Post: Sample title>

Hurray! Wanna check if it worked?

command-line
>>> Post.objects.all()
<QuerySet [<Post: my post title>, <Post: another post title>, <Post: Sample title>]>

There it is, one more post in the list!

Filtering objects
>>> Post.objects.filter(author=me)
<QuerySet [<Post: Sample title>, <Post: Post number 2>, <Post: My 3rd post!>, <Post: 4th title of post>]>

Or maybe we want to see all the posts that contain the word 'title' in the title field?

command-line
>>> Post.objects.filter(title__contains='title')
<QuerySet [<Post: Sample title>, <Post: 4th title of post>]>

Note:There are two underscore characters (_) between title and contains. Django's ORM uses this rule to separate field names ("title") and operations or filters ("contains"). If you use only one underscore, you'll get an error like "FieldError: Cannot resolve keyword title_contains".

You can also get a list of all published posts. We do this by filtering all the posts that have published_date set in the past:

command-line
>>> from django.utils import timezone
>>> Post.objects.filter(published_date__lte=timezone.now())
<QuerySet []>
Unfortunately, the post we added from the Python console is not published yet. But we can change that! First get an instance of a post we want to publish:

command-line
>>> post = Post.objects.get(title="Sample title")
And then publish it with our publish method:

command-line
>>> post.publish()
Now try to get list of published posts again (press the up arrow key three times and hit enter):

command-line
>>> Post.objects.filter(published_date__lte=timezone.now())
<QuerySet [<Post: Sample title>]>

Ordering objects
QuerySets also allow you to order the list of objects. Let's try to order them by created_date field:

command-line
>>> Post.objects.order_by('created_date')
<QuerySet [<Post: Sample title>, <Post: Post number 2>, <Post: My 3rd post!>, <Post: 4th title of post>]>
We can also reverse the ordering by adding - at the beginning:

command-line
>>> Post.objects.order_by('-created_date')
<QuerySet [<Post: 4th title of post>,  <Post: My 3rd post!>, <Post: Post number 2>, <Post: Sample title>]>
Complex queries through method-chaining
As you saw, some methods on Post.objects return a QuerySet. The same methods can in turn also be called on a QuerySet, and will then return a new QuerySet. Thus, you can combine their effect by chaining them together:

>>> Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
<QuerySet [<Post: Post number 2>, <Post: My 3rd post!>, <Post: 4th title of post>, <Post: Sample title>]>
This is really powerful and lets you write quite complex queries.

Cool! You're now ready for the next part! To close the shell, type this:

command-line
>>> exit()
$

https://tutorial.djangogirls.org/en/django_orm/